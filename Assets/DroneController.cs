//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/DroneController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DroneController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DroneController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DroneController"",
    ""maps"": [
        {
            ""name"": ""Drone"",
            ""id"": ""acdf0d51-ad7f-4a45-97b3-0443300a5ccc"",
            ""actions"": [
                {
                    ""name"": ""DroneTurn"",
                    ""type"": ""Value"",
                    ""id"": ""433cd52a-71d0-406c-ad5f-8c20c8b8aefc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DroneMove"",
                    ""type"": ""Value"",
                    ""id"": ""302db231-2a2c-454d-a095-7b1c5faa1dad"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DroneDown"",
                    ""type"": ""Button"",
                    ""id"": ""518ca55d-3b62-47d3-9c54-e262d0dd4118"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DroneUp"",
                    ""type"": ""Button"",
                    ""id"": ""433582c1-e45e-4750-aa29-083d2671d341"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Stand"",
                    ""type"": ""Button"",
                    ""id"": ""56b372d1-350a-4ddb-8c26-f68568b94e30"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""809d0315-d138-4a82-bc9d-37b5f8740d4d"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Continuous Move"",
                    ""action"": ""DroneMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0374d137-34ab-4eae-9494-2e4a21a37a89"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""DroneDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3056ba7-de8e-4272-a3b4-7908e8856944"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""DroneUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55d90632-6f1b-4c18-8f35-36c00e33fa1d"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Stand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e727102-9d91-4706-9a30-cf1c1e1f887a"",
                    ""path"": ""<XRController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Stand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5cfc0db9-57cf-40c0-8b84-2645ca0e9948"",
                    ""path"": ""<XRController>{RightHand}/Primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""DroneTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2001275c-59a9-44e0-92f6-b45c311df32b"",
                    ""path"": ""<XRController>{RightHand}/Primary2DAxis"",
                    ""interactions"": ""Sector(directions=12,sweepBehavior=1),Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DroneTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Drone1"",
            ""id"": ""004809fe-0e28-4922-9cd4-fb1a28c6c7ba"",
            ""actions"": [
                {
                    ""name"": ""Cyclic"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b734995e-f38d-4c94-bc28-da002166e440"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pedals"",
                    ""type"": ""Value"",
                    ""id"": ""4a7664b3-8a0a-4980-966d-01a93706a516"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Throttle"",
                    ""type"": ""Value"",
                    ""id"": ""48773d20-5937-4231-9e4f-9d5baac257e4"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Stand"",
                    ""type"": ""Button"",
                    ""id"": ""f5c78169-a70c-48e8-bcfd-9147c3551f8a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""ecb9ea88-82e8-4f51-a9d3-749a4a525961"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cyclic"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3496a8d9-ef84-4548-9204-a0783e49a9f2"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cyclic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""98751afd-1be6-4491-abf2-3ff5918f6fef"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cyclic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""66b9f8cc-54a3-4bc5-b369-65887a68f572"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cyclic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bfe099d7-7427-4ae2-ad82-d51372ac9cc3"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cyclic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""84657199-a089-48d4-85c2-3fc7198c0beb"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Joystick;XR"",
                    ""action"": ""Cyclic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""d4a4f12d-234c-4c3e-b64b-e063a5386608"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pedals"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""7d8d200a-a174-43d7-91f2-4864eb78e8ea"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pedals"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""945abd72-9403-4cbc-ada2-3b6fef95beba"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pedals"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""aa3577f1-9638-45d7-8a33-2cc34456780f"",
                    ""path"": ""<XRController>{RightHand}/Primary2DAxis"",
                    ""interactions"": ""Sector(directions=12)"",
                    ""processors"": """",
                    ""groups"": ""Joystick;XR"",
                    ""action"": ""Pedals"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""57746217-90b3-4771-ab29-0aea1955369b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""76d20071-5aef-435d-9b88-d7e9f878701f"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""83379d57-87fa-47b3-a0fd-ec3da937a95d"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""7f3a9525-3899-421d-a99d-c08870d1663e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c360eca4-e880-4755-a079-bb0a5dbfe396"",
                    ""path"": ""<XRController>{LeftHand}/triggerButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick;XR"",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a399efe1-a4d3-467a-8838-6bb6c2bf7aa6"",
                    ""path"": ""<XRController>{RightHand}/triggerButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick;XR"",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f6075130-5870-4964-ba64-2f0d2f2624e8"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Stand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79159d41-ec8a-4e90-bb59-c7b074a9ae5b"",
                    ""path"": ""<XRController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR;Joystick"",
                    ""action"": ""Stand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Drone
        m_Drone = asset.FindActionMap("Drone", throwIfNotFound: true);
        m_Drone_DroneTurn = m_Drone.FindAction("DroneTurn", throwIfNotFound: true);
        m_Drone_DroneMove = m_Drone.FindAction("DroneMove", throwIfNotFound: true);
        m_Drone_DroneDown = m_Drone.FindAction("DroneDown", throwIfNotFound: true);
        m_Drone_DroneUp = m_Drone.FindAction("DroneUp", throwIfNotFound: true);
        m_Drone_Stand = m_Drone.FindAction("Stand", throwIfNotFound: true);
        // Drone1
        m_Drone1 = asset.FindActionMap("Drone1", throwIfNotFound: true);
        m_Drone1_Cyclic = m_Drone1.FindAction("Cyclic", throwIfNotFound: true);
        m_Drone1_Pedals = m_Drone1.FindAction("Pedals", throwIfNotFound: true);
        m_Drone1_Throttle = m_Drone1.FindAction("Throttle", throwIfNotFound: true);
        m_Drone1_Stand = m_Drone1.FindAction("Stand", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Drone
    private readonly InputActionMap m_Drone;
    private List<IDroneActions> m_DroneActionsCallbackInterfaces = new List<IDroneActions>();
    private readonly InputAction m_Drone_DroneTurn;
    private readonly InputAction m_Drone_DroneMove;
    private readonly InputAction m_Drone_DroneDown;
    private readonly InputAction m_Drone_DroneUp;
    private readonly InputAction m_Drone_Stand;
    public struct DroneActions
    {
        private @DroneController m_Wrapper;
        public DroneActions(@DroneController wrapper) { m_Wrapper = wrapper; }
        public InputAction @DroneTurn => m_Wrapper.m_Drone_DroneTurn;
        public InputAction @DroneMove => m_Wrapper.m_Drone_DroneMove;
        public InputAction @DroneDown => m_Wrapper.m_Drone_DroneDown;
        public InputAction @DroneUp => m_Wrapper.m_Drone_DroneUp;
        public InputAction @Stand => m_Wrapper.m_Drone_Stand;
        public InputActionMap Get() { return m_Wrapper.m_Drone; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DroneActions set) { return set.Get(); }
        public void AddCallbacks(IDroneActions instance)
        {
            if (instance == null || m_Wrapper.m_DroneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DroneActionsCallbackInterfaces.Add(instance);
            @DroneTurn.started += instance.OnDroneTurn;
            @DroneTurn.performed += instance.OnDroneTurn;
            @DroneTurn.canceled += instance.OnDroneTurn;
            @DroneMove.started += instance.OnDroneMove;
            @DroneMove.performed += instance.OnDroneMove;
            @DroneMove.canceled += instance.OnDroneMove;
            @DroneDown.started += instance.OnDroneDown;
            @DroneDown.performed += instance.OnDroneDown;
            @DroneDown.canceled += instance.OnDroneDown;
            @DroneUp.started += instance.OnDroneUp;
            @DroneUp.performed += instance.OnDroneUp;
            @DroneUp.canceled += instance.OnDroneUp;
            @Stand.started += instance.OnStand;
            @Stand.performed += instance.OnStand;
            @Stand.canceled += instance.OnStand;
        }

        private void UnregisterCallbacks(IDroneActions instance)
        {
            @DroneTurn.started -= instance.OnDroneTurn;
            @DroneTurn.performed -= instance.OnDroneTurn;
            @DroneTurn.canceled -= instance.OnDroneTurn;
            @DroneMove.started -= instance.OnDroneMove;
            @DroneMove.performed -= instance.OnDroneMove;
            @DroneMove.canceled -= instance.OnDroneMove;
            @DroneDown.started -= instance.OnDroneDown;
            @DroneDown.performed -= instance.OnDroneDown;
            @DroneDown.canceled -= instance.OnDroneDown;
            @DroneUp.started -= instance.OnDroneUp;
            @DroneUp.performed -= instance.OnDroneUp;
            @DroneUp.canceled -= instance.OnDroneUp;
            @Stand.started -= instance.OnStand;
            @Stand.performed -= instance.OnStand;
            @Stand.canceled -= instance.OnStand;
        }

        public void RemoveCallbacks(IDroneActions instance)
        {
            if (m_Wrapper.m_DroneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDroneActions instance)
        {
            foreach (var item in m_Wrapper.m_DroneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DroneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DroneActions @Drone => new DroneActions(this);

    // Drone1
    private readonly InputActionMap m_Drone1;
    private List<IDrone1Actions> m_Drone1ActionsCallbackInterfaces = new List<IDrone1Actions>();
    private readonly InputAction m_Drone1_Cyclic;
    private readonly InputAction m_Drone1_Pedals;
    private readonly InputAction m_Drone1_Throttle;
    private readonly InputAction m_Drone1_Stand;
    public struct Drone1Actions
    {
        private @DroneController m_Wrapper;
        public Drone1Actions(@DroneController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Cyclic => m_Wrapper.m_Drone1_Cyclic;
        public InputAction @Pedals => m_Wrapper.m_Drone1_Pedals;
        public InputAction @Throttle => m_Wrapper.m_Drone1_Throttle;
        public InputAction @Stand => m_Wrapper.m_Drone1_Stand;
        public InputActionMap Get() { return m_Wrapper.m_Drone1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Drone1Actions set) { return set.Get(); }
        public void AddCallbacks(IDrone1Actions instance)
        {
            if (instance == null || m_Wrapper.m_Drone1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Drone1ActionsCallbackInterfaces.Add(instance);
            @Cyclic.started += instance.OnCyclic;
            @Cyclic.performed += instance.OnCyclic;
            @Cyclic.canceled += instance.OnCyclic;
            @Pedals.started += instance.OnPedals;
            @Pedals.performed += instance.OnPedals;
            @Pedals.canceled += instance.OnPedals;
            @Throttle.started += instance.OnThrottle;
            @Throttle.performed += instance.OnThrottle;
            @Throttle.canceled += instance.OnThrottle;
            @Stand.started += instance.OnStand;
            @Stand.performed += instance.OnStand;
            @Stand.canceled += instance.OnStand;
        }

        private void UnregisterCallbacks(IDrone1Actions instance)
        {
            @Cyclic.started -= instance.OnCyclic;
            @Cyclic.performed -= instance.OnCyclic;
            @Cyclic.canceled -= instance.OnCyclic;
            @Pedals.started -= instance.OnPedals;
            @Pedals.performed -= instance.OnPedals;
            @Pedals.canceled -= instance.OnPedals;
            @Throttle.started -= instance.OnThrottle;
            @Throttle.performed -= instance.OnThrottle;
            @Throttle.canceled -= instance.OnThrottle;
            @Stand.started -= instance.OnStand;
            @Stand.performed -= instance.OnStand;
            @Stand.canceled -= instance.OnStand;
        }

        public void RemoveCallbacks(IDrone1Actions instance)
        {
            if (m_Wrapper.m_Drone1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDrone1Actions instance)
        {
            foreach (var item in m_Wrapper.m_Drone1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Drone1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Drone1Actions @Drone1 => new Drone1Actions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IDroneActions
    {
        void OnDroneTurn(InputAction.CallbackContext context);
        void OnDroneMove(InputAction.CallbackContext context);
        void OnDroneDown(InputAction.CallbackContext context);
        void OnDroneUp(InputAction.CallbackContext context);
        void OnStand(InputAction.CallbackContext context);
    }
    public interface IDrone1Actions
    {
        void OnCyclic(InputAction.CallbackContext context);
        void OnPedals(InputAction.CallbackContext context);
        void OnThrottle(InputAction.CallbackContext context);
        void OnStand(InputAction.CallbackContext context);
    }
}
